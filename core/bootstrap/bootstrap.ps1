# RooCode Bootstrap Script for Windows 11 Pro
# Initializes the complete RooCode system with validation and setup
# Version: 1.0
# Created: 2025-06-28

param(
    [switch]$Verbose,
    [switch]$Force,
    [string]$Profile = "buddy"
)

# Configuration
$ErrorActionPreference = "Stop"
$LogFile = "bootstrap.log.yaml"
$RequiredPythonVersion = "3.11"

Write-Host "RooCode Bootstrap Script Starting..." -ForegroundColor Green
Write-Host "Profile: $Profile" -ForegroundColor Cyan

# Initialize log
$LogEntries = @()
$LogEntries += @{
    timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
    action = "bootstrap_started"
    profile = $Profile
    result = "initiated"
}

try {
    # Step 1: Validate project structure
    Write-Host "Step 1: Validating RooCode project structure..." -ForegroundColor Yellow
    
    $RequiredDirs = @(
        "core/modes",
        "core/templates", 
        "core/ci",
        "core/vocab",
        "core/config",
        "modules",
        "pim",
        "docs"
    )
    
    $RequiredFiles = @(
        "requirements.txt",
        "README.md",
        ".gitignore",
        "core/config/llm.config.yaml",
        "core/vocab/vocab.yaml",
        "pim/tasks",
        "pim/status.yaml"
    )
    
    foreach ($dir in $RequiredDirs) {
        if (-not (Test-Path $dir)) {
            throw "Required directory missing: $dir"
        }
    }
    
    foreach ($file in $RequiredFiles) {
        if (-not (Test-Path $file)) {
            throw "Required file missing: $file"
        }
    }
    
    $LogEntries += @{
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        action = "structure_validation"
        result = "success"
        details = "All required directories and files present"
    }
    
    # Step 2: Check Python environment
    Write-Host "Step 2: Checking Python environment..." -ForegroundColor Yellow
    
    $PythonVersion = python --version 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "Python not found. Please install Python $RequiredPythonVersion or higher."
    }
    
    Write-Host "Found: $PythonVersion" -ForegroundColor Green
    
    # Step 3: Virtual environment setup
    Write-Host "Step 3: Setting up virtual environment..." -ForegroundColor Yellow
    
    if (-not (Test-Path ".venv")) {
        python -m venv .venv
        Write-Host "Created virtual environment" -ForegroundColor Green
    } else {
        Write-Host "Virtual environment already exists" -ForegroundColor Green
    }
    
    # Activate virtual environment
    & ".venv\Scripts\Activate.ps1"
    
    # Step 4: Install dependencies
    Write-Host "Step 4: Installing dependencies..." -ForegroundColor Yellow
    
    python -m pip install --upgrade pip wheel setuptools
    python -m pip install -r core/config/requirements.txt
    
    $LogEntries += @{
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        action = "dependencies_installed"
        result = "success"
        details = "All requirements.txt dependencies installed"
    }
    
    # Step 5: Validate configuration
    Write-Host "Step 5: Validating configuration..." -ForegroundColor Yellow
    
    if (Test-Path "core/config/llm.config.yaml") {
        Write-Host "LLM configuration found" -ForegroundColor Green
    } else {
        Write-Warning "LLM configuration missing - manual setup required"
    }
    
    # Step 6: Create .env file
    Write-Host "Step 6: Creating environment configuration..." -ForegroundColor Yellow
    
    $EnvContent = @"
# RooCode Local Environment Configuration
# Generated by bootstrap.ps1 on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

ROOCODE_PROFILE=$Profile
ROOCODE_MODE=buddy
PYTHON_PATH=.venv/Scripts/python.exe
PROJECT_ROOT=$PWD
LOG_LEVEL=INFO
"@
    
    $EnvContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "Environment file created" -ForegroundColor Green
    
    # Final validation
    $LogEntries += @{
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        action = "bootstrap_completed"
        result = "success"
        details = "RooCode system fully initialized and ready"
    }
    
    Write-Host "`nBootstrap completed successfully!" -ForegroundColor Green
    Write-Host "System is ready for RooCode operation." -ForegroundColor Green
    Write-Host "Next step: Run docker-run.ps1 to start the system" -ForegroundColor Cyan
    
} catch {
    $LogEntries += @{
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        action = "bootstrap_failed"
        result = "error"
        error = $_.Exception.Message
    }
    
    Write-Error "Bootstrap failed: $($_.Exception.Message)"
    exit 1
    
} finally {
    # Write log file
    $LogData = @{
        bootstrap_log = $LogEntries
        final_status = if ($LogEntries[-1].result -eq "success") { "completed" } else { "failed" }
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
    }
    
    $LogData | ConvertTo-Yaml | Out-File -FilePath $LogFile -Encoding UTF8
    Write-Host "Log written to: $LogFile" -ForegroundColor Gray
}
